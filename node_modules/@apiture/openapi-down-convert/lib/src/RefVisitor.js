"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.walkObject = exports.visitRefObjects = exports.visitSchemaObjects = exports.isRef = void 0;
function isRef(node) {
    return node !== null && typeof node === 'object' && node.hasOwnProperty('$ref') && typeof node['$ref'] === 'string';
}
exports.isRef = isRef;
function visitSchemaObjects(node, schemaCallback) {
    const objectVisitor = (node) => {
        if (node.hasOwnProperty('schema')) {
            const schema = node['schema'];
            if (schema != null && typeof schema === 'object') {
                node['schema'] = schemaCallback(schema);
            }
        }
        else if (node.hasOwnProperty('schemas')) {
            const schemas = node['schemas'];
            if (schemas != null && typeof schemas === 'object') {
                for (const schemaName in schemas) {
                    const schema = schemas[schemaName];
                    schemas[schemaName] = schemaCallback(schema);
                }
            }
        }
        return node;
    };
    return walkObject(node, objectVisitor);
}
exports.visitSchemaObjects = visitSchemaObjects;
function visitRefObjects(node, refCallback) {
    const objectVisitor = (node) => {
        if (isRef(node)) {
            return refCallback(node);
        }
        return node;
    };
    return walkObject(node, objectVisitor);
}
exports.visitRefObjects = visitRefObjects;
function walkObject(node, objectCallback) {
    return walkObj(node);
    function walkObj(node) {
        const object = objectCallback(node);
        if (object !== null && typeof object === 'object') {
            const keys = [...Object.keys(node)];
            for (const key of keys) {
                const val = node[key];
                if (Array.isArray(val)) {
                    node[key] = walkArray(val);
                }
                else if (val !== null && typeof val === 'object') {
                    node[key] = walkObj(val);
                }
            }
        }
        return object;
    }
    function walkArray(array) {
        for (let index = 0; index < array.length; index += 1) {
            const val = array[index];
            if (val !== null && typeof val === 'object') {
                array[index] = walkObj(val);
            }
            else if (Array.isArray(val)) {
                array[index] = walkArray(val);
            }
        }
        return array;
    }
}
exports.walkObject = walkObject;
//# sourceMappingURL=RefVisitor.js.map